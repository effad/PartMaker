/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin'    
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls' ]
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testRuntimeOnly "org.junit.platform:junit-platform-commons:1.7.0"
	testCompile "org.testfx:testfx-junit5:4.0.16-alpha"
    testCompile "org.testfx:openjfx-monocle:jdk-12.0.1+2" 

	// Utility libraries
    implementation 'com.google.guava:guava:29.0-jre'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    
    // Jackson is used to deserialize .json file into POJOs 
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.12.2'
    
    // Groovy is used for scripts that generate parts    
    implementation 'org.codehaus.groovy:groovy:3.0.7'
    
    // ValidatorFX is used for parameter validation
    implementation 'net.synedra:validatorfx:0.1.14'
    
    // RichTextFX is used for source code editing
    implementation 'org.fxmisc.richtext:richtextfx:0.10.7'
    
    // Ikonli provides nice icons
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.2.0'
    implementation 'org.kordamp.ikonli:ikonli-feather-pack:12.2.0'
    
    // No maven coordinates for JDXF, so we include locally
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}

application {
    // Define the main class for the application.
    mainClass = 'org.partmaker.PartMaker'
}

tasks.named('test') {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}
